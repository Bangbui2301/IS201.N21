DELIMITER //
-- show triggers;
-- KHACH_HANG
-- Ngày sinh của khách hàng phải nhỏ hơn ngày tạo đơn hàng
CREATE TRIGGER TRG_NGAYSINH_KHACHANG_DONHANG
BEFORE UPDATE ON KHACH_HANG 
FOR EACH ROW
BEGIN
	DECLARE V_NGAY_SINH DATE ;
    DECLARE V_NGAY_TAO DATETIME ;
	DECLARE done INT DEFAULT FALSE;
    DECLARE NGAY CURSOR FOR SELECT NGAY_TAO FROM DON_HANG WHERE DON_HANG.MA_KHACH_HANG = NEW.MA_KHACH_HANG ;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE ;
    
	SELECT NGAY_SINH INTO V_NGAY_SINH
    FROM KHACH_HANG KH
    WHERE KH.NGAY_SINH = NEW.NGAY_SINH;
    
    OPEN NGAY;
    
    getNgayTao: LOOP
		FETCH NGAY INTO V_NGAY_TAO;
        IF done THEN LEAVE getNgayTao;
		END IF;
		IF V_NGAY_SINH > V_NGAY_TAO THEN
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = 'Ngày sinh không được lớn hơn ngày tạo hóa đơn.';
        END IF;
	END LOOP getNgayTao;
    
    CLOSE NGAY;
END //


-- Ngày sinh phải nhỏ hơn ngày tạo đánh giá
CREATE TRIGGER TRG_NGAYSINH_KHACHANG_DANHGIA
BEFORE UPDATE ON KHACH_HANG 
FOR EACH ROW
BEGIN
	DECLARE V_NGAY_SINH DATE ;
    DECLARE V_NGAY_TAO DATETIME ;
	DECLARE done INT DEFAULT FALSE;
    DECLARE NGAY CURSOR FOR SELECT NGAY_TAO FROM DANH_GIA WHERE DANH_GIA.MA_KHACH_HANG = NEW.MA_KHACH_HANG ;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE ;
    
	SELECT NGAY_SINH INTO V_NGAY_SINH
    FROM KHACH_HANG KH
    WHERE KH.NGAY_SINH = NEW.NGAY_SINH;
    
    OPEN NGAY ;
    
    getNgayTao: LOOP
		FETCH NGAY INTO V_NGAY_TAO;
        IF done THEN LEAVE getNgayTao;
		END IF;
		IF V_NGAY_SINH > V_NGAY_TAO THEN
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = 'Ngày sinh không được lớn hơn ngày tạo đánh giá.';
        END IF;
	END LOOP getNgayTao;
    
    CLOSE NGAY;
END //

-- Ngày sinh phải nhỏ hơn ngày hết hạn thanh của thẻ thanh toán
CREATE TRIGGER TRG_NGAYSINH_KHACHANG_THANHTOAN
BEFORE UPDATE ON KHACH_HANG 
FOR EACH ROW
BEGIN
	DECLARE V_NGAY_SINH DATETIME ;
    DECLARE V_NGAY_HET_HAN DATETIME ;
	DECLARE done INT DEFAULT FALSE;
    DECLARE NGAY CURSOR FOR SELECT NGAY_HET_HAN FROM THANH_TOAN WHERE THANH_TOAN.MA_KHACH_HANG = NEW.MA_KHACH_HANG ;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE ;
    
	SELECT NGAY_SINH INTO V_NGAY_SINH
    FROM KHACH_HANG KH
    WHERE KH.NGAY_SINH = NEW.NGAY_SINH;
    
    OPEN NGAY ;
    
    getNgayhethan: LOOP
		FETCH NGAY INTO V_NGAY_HET_HAN;
        IF done THEN LEAVE getNgayhethan;
		END IF;
		IF V_NGAY_SINH > V_NGAY_HET_HAN THEN
            SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = 'Ngày sinh không được lớn hơn ngày lập hóa đơn.';
        END IF;
	END LOOP getNgayhethan;
    
    CLOSE NGAY;
END //


-- Điểm tích lũy của khách hàng
-- 1/Điêm tích lũy tăng khi đơn hàng xác nhận đã thanh toán
CREATE TRIGGER TRG_DIEM_TL_ADD
AFTER UPDATE ON DON_HANG
FOR EACH ROW
BEGIN
	DECLARE V_TINH_TRANG INT;
    DECLARE V_DIEM INT;
IF NEW.TINH_TRANG <> OLD.TINH_TRANG THEN
	    
    SELECT MA_TINH_TRANG
    INTO V_TINH_TRANG
    FROM DON_HANG
    WHERE MA_DON_HANG = NEW.MA_DON_HANG;
    
    IF V_TINH_TRANG = 'Đã thanh toán' THEN
        
        UPDATE KHACH_HANG
        SET DIEM_TICH_LUY = DIEM_TICH_LUY + (NEW.TRI_GIA / 1000)
        WHERE MA_KHACH_HANG = NEW.MA_KHACH_HANG;
        
        SELECT DIEM_TICH_LUY INTO V_DIEM
        FROM KHACH_HANG
        WHERE MA_KHACH_HANG = NEW.MA_KHACH_HANG;
        IF (V_DIEM >= 3000) THEN
			UPDATE KHACH_HANG
            SET LOAI_KHACH_HANG = 'Khách hàng VIP'
            WHERE MA_KHACH_HANG = NEW.MA_KHACH_HANG;
		ELSEIF (V_DIEM >= 1500) THEN
			UPDATE KHACH_HANG
            SET LOAI_KHACH_HANG = 'Khách hàng thân thiết'
            WHERE MA_KHACH_HANG = NEW.MA_KHACH_HANG;
		END IF;
    END IF;
END IF;
END //

-- 2/Điểm tích lũy của khách hàng giảm khi xóa đơn đã được thanh toán
CREATE TRIGGER TRG_DIEM_TL_SUB
AFTER DELETE ON DON_HANG
FOR EACH ROW
BEGIN
	DECLARE V_TINH_TRANG INT;
    DECLARE V_DIEM INT;
	    
    SELECT MA_TINH_TRANG
    INTO V_TINH_TRANG
    FROM DON_HANG
    WHERE MA_DON_HANG = OLD.MA_DON_HANG;
    
    IF V_TINH_TRANG = 'Đã thanh toán' THEN
		
        UPDATE KHACH_HANG
        SET DIEM_TICH_LUY = DIEM_TICH_LUY - (OLD.TRI_GIA / 1000)
        WHERE MA_KHACH_HANG = OLD.MA_KHACH_HANG;
        
        SELECT DIEM_TICH_LUY INTO V_DIEM
        FROM KHACH_HANG
        WHERE MA_KHACH_HANG = OLD.MA_KHACH_HANG;
        IF (V_DIEM >= 3000) THEN
			UPDATE KHACH_HANG
            SET LOAI_KHACH_HANG = 'Khách hàng VIP'
            WHERE MA_KHACH_HANG = OLD.MA_KHACH_HANG;
		ELSEIF (V_DIEM >= 1500) THEN
			UPDATE KHACH_HANG
            SET LOAI_KHACH_HANG = 'Khách hàng thân thiết'
            WHERE MA_KHACH_HANG = OLD.MA_KHACH_HANG;
		ELSE 
			UPDATE KHACH_HANG
            SET LOAI_KHACH_HANG = 'Khách hàng bình thường'
            WHERE MA_KHACH_HANG = OLD.MA_KHACH_HANG;
		END IF;
    END IF;
END //

-- Tăng trị giá GIỎ HÀNG  khi có thêm mới một chi tiết
CREATE TRIGGER TRG_INSERT_TONGTIEN_CTGH_GIOHANG
AFTER INSERT ON CTGH
FOR EACH ROW
BEGIN
    DECLARE V_GIA FLOAT;
    DECLARE V_MAKH INT;
    
    SELECT DON_GIA
    INTO V_GIA
    FROM SAN_PHAM
    WHERE SAN_PHAM.MA_SAN_PHAM = NEW.MA_SP;
    
    UPDATE GIO_HANG
    SET TONG_TIEN = TONG_TIEN + (NEW.SO_LUONG * V_GIA)
    WHERE GIO_HANG.MA_KHACH_HANG = NEW.MA_KH;
END //

-- Giảm trị giá hóa đơn khi xóa đi một chi tiết 
CREATE TRIGGER TRG_DELETE_TONGTIEN_CTGH_GIOHANG
AFTER DELETE ON CTGH
FOR EACH ROW
BEGIN
    DECLARE V_GIA FLOAT;
    
    SELECT DON_GIA
    INTO V_GIA
    FROM SAN_PHAM
    WHERE SAN_PHAM.MA_SAN_PHAM = OLD.MA_SP;
    
    UPDATE GIO_HANG
    SET TONG_TIEN = TONG_TIEN - (OLD.SO_LUONG * V_GIA)
    WHERE GIO_HANG.MA_KHACH_HANG = OLD.MA_KH;
END //

-- Thay đổi trị giá hóa đơn khi cập nhập số lượng một chi tiết
CREATE TRIGGER TRG_UPDATE_SL_TONGTIEN_CTGH_GIOHANG
AFTER UPDATE ON CTGH
FOR EACH ROW
BEGIN
	DECLARE V_GIA FLOAT;
    
    IF NEW.SO_LUONG <> OLD.SO_LUONG THEN
		SELECT DON_GIA INTO V_GIA
        FROM SAN_PHAM
        WHERE SAN_PHAM.MA_SAN_PHAM = OLD.MA_SP;
        
        UPDATE GIO_HANG
        SET TONG_TIEN = TONG_TIEN - (OLD.SO_LUONG * V_GIA) + (NEW.SO_LUONG * V_GIA)
        WHERE MA_KHACH_HANG = NEW.MA_KH;
    END IF;
END //

-- Thay đổi trị giá sản phẩm khi cập nhập lại gía trị của một sản phẩm
 CREATE TRIGGER TRG_UPDATE_DONGIA_SANPHAM_GIOHANG
 AFTER UPDATE ON SAN_PHAM
 FOR EACH ROW
 BEGIN
	DECLARE V_SL INT;
    DECLARE V_MA_KHACH_HANG INT;
    DECLARE done INT DEFAULT FALSE;
    DECLARE CTGH_CURSOR CURSOR FOR 
		SELECT MA_KH, SO_LUONG 
        FROM CTGH, KHACH_HANG
        WHERE CTGH.MA_SP = NEW.MA_SAN_PHAM
			AND CTGH.MA_KH = KHACH_HANG.MA_KHACH_HANG;
	
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE ;
    
	IF NEW.DON_GIA <> OLD.DON_GIA THEN
		OPEN CTGH_CURSOR;
        
        getCTGH: LOOP
			FETCH CTGH_CURSOR INTO V_MA_KHACH_HANG, V_SL;
            IF done THEN LEAVE getCTGH;
            END IF;
            UPDATE GIO_HANG
            SET TONG_TIEN = TONG_TIEN - (OLD.DON_GIA * V_SL) + (NEW.DON_GIA * V_SL)
            WHERE MA_KHACH_HANG = V_MA_KHACH_HANG;
        END LOOP getCTGH;
        
        CLOSE CTGH_CURSOR;
	END IF;	
 END //
 
 -- Giảm số lượng tồn kho khi cho sản phẩm vào giỏ hàng
 CREATE TRIGGER TRG_CHECK_SL_SANPHAM
 BEFORE INSERT ON DON_HANG
 FOR EACH ROW
 BEGIN
    DECLARE V_MA_SAN_PHAM INT;
    DECLARE V_SL INT;
	DECLARE V_SL_TON INT;
    
    DECLARE done INT DEFAULT FALSE;
    DECLARE CTGH_CURSOR CURSOR FOR
		SELECT MA_SP, SO_LUONG 
        FROM CTGH
        WHERE MA_KH = NEW.MA_KHACH_HANG;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE ;
    
    OPEN CTGH_CURSOR;
    
    getCTGH: LOOP
		FETCH CTGH_CURSOR INTO V_MA_SAN_PHAM, V_SL;
        IF done THEN LEAVE getCTGH;
        END IF;
        
		SELECT SO_LUONG INTO V_SL_TON
		FROM SAN_PHAM
		WHERE MA_SAN_PHAM = V_MA_SAN_PHAM;
        
        IF (V_SL > V_SL_TON) THEN
			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT = 'Số lượng tồn của sản phẩm không đủ.';
		ELSE
			UPDATE SAN_PHAM
			SET SO_LUONG = SO_LUONG - V_SL
			WHERE MA_SAN_PHAM = V_MA_SAN_PHAM;
		END IF;
    END LOOP getCTGH;
   
    CLOSE CTGH_CURSOR;
    
 END //
 
 -- Tình trạng sản phẩm insert
 CREATE TRIGGER TRG_CHECK_SL_TON_KHO
 BEFORE INSERT ON SAN_PHAM
 FOR EACH ROW
 BEGIN
	IF NEW.SO_LUONG = 0 THEN
		SET NEW.TINH_TRANG = 0;
	ELSE SET NEW.TINH_TRANG = 1;
    END IF;
 END //
 
 -- Tình trạng sản phẩm update
 CREATE TRIGGER TRG_CHECK_SL_TON_KHO_2
 BEFORE UPDATE ON SAN_PHAM
 FOR EACH ROW
 BEGIN
	IF NEW.SO_LUONG = 0 THEN
		SET NEW.TINH_TRANG = 0;
	ELSE SET NEW.TINH_TRANG = 1;
    END IF;
 END //

-- Xử lý ngày tạo ngày đăng, ngày tạo.
CREATE TRIGGER TRG_INSERT_SANPHAM_NGAY
BEFORE INSERT ON SAN_PHAM
FOR EACH ROW
BEGIN
    SET NEW.NGAY_TAO = NOW(), NEW.NGAY_SUA = NOW();
END //

CREATE TRIGGER TRG_UPDATE_SANPHAM_NGAY
BEFORE UPDATE ON SAN_PHAM
FOR EACH ROW
BEGIN
    SET NEW.NGAY_SUA = NOW();
END //

CREATE TRIGGER TRG_INSERT_TINTUC_NGAY
BEFORE INSERT ON TIN_TUC
FOR EACH ROW
BEGIN
    SET NEW.NGAY_TAO = NOW(), NEW.NGAY_SUA = NOW();
END //

CREATE TRIGGER TRG_UPDATE_TINTUC_NGAY
BEFORE UPDATE ON TIN_TUC
FOR EACH ROW
BEGIN
    SET NEW.NGAY_SUA = NOW();
END //

CREATE TRIGGER TRG_INSERT_VOUCHER_NGAY
BEFORE INSERT ON VOUCHER
FOR EACH ROW
BEGIN
    SET NEW.NGAY_TAO = NOW(), NEW.NGAY_SUA = NOW();
END //

CREATE TRIGGER TRG_UPDATE_VOUCHER_NGAY
BEFORE UPDATE ON VOUCHER
FOR EACH ROW
BEGIN
    SET NEW.NGAY_SUA = NOW();
END //

CREATE TRIGGER TRG_INSERT_DONHANG_NGAY
BEFORE INSERT ON DON_HANG
FOR EACH ROW
BEGIN
    SET NEW.NGAY_TAO = NOW(), NEW.NGAY_SUA = NOW();
END //

CREATE TRIGGER TRG_UPDATE_DONHANG_NGAY
BEFORE UPDATE ON DON_HANG
FOR EACH ROW
BEGIN
    SET NEW.NGAY_SUA = NOW();
END //

CREATE TRIGGER TRG_INSERT_DANHGIA_NGAY
BEFORE INSERT ON DANH_GIA
FOR EACH ROW
BEGIN
    SET NEW.NGAY_TAO = NOW();
END //

CREATE TRIGGER TRG_INSERT_KHACHHANG_NGAY
BEFORE INSERT ON KHACH_HANG
FOR EACH ROW
BEGIN
    SET NEW.NGAY_TAO = NOW();
END //

DELIMITER ;
